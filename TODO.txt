## NEXT #########################################

BE
- Add TSConfig option: statementIriTypeFilter.subject = 1|2
- Add namespacesToIncludeInPrologue field to api plugin flexform

FE
- ensure 9.5 compatibility
-- test serializer plugin
-- test vocabulary plugin
-- templates
--- send iris in iri param through urlencode
--- think about htmlspecialchars

- definedNamespaces condition in ttl, nt, json, rdfa templates

-- type param rewriting in TYPO3 9.5
--- throw correct error if iri not found

- AboutController / IriRepository: add possibility/setting to retrieve statements by object
-- generally for all IRIs by TypoScript
-- checkbox in statement: "Allow inversion"

- simple search in list
- list sorting by: value, label
- filter list with graph param
-- https://www.w3.org/TR/sparql11-http-rdf-update/
-- https://www.w3.org/TR/sparql11-protocol/#query

DATA
- create ext_tables_static+adt.sql
-- set static namespaces: rdf, rdfs, owl, dc, dcterms, void, skos
--- https://ogp.me/
--- https://github.com/schemaorg/schemaorg/blob/master/data/releases/5.0/all-layers-properties.csv
--- https://www.dublincore.org/specifications/dublin-core/dcmi-terms/#elements-title
-- maybe create all rdf/rdfs Classes/Properties?

BACKPORTS
- bug in 7.6 ttl & nt templates (list view) => iri param => tx_lod_api[iri] param
- missing ' in AlternativeSerialization.nt in if condition

DOCUMENTATION
-- use IRIs as lists of controlled and resolvable terms for selects etc.

### v.1.1 ###

- inverse properties
-- if IRI type 2 (property) add group field "inverse of" (bidirectional mm relation shown from both sides)
-- https://www.semanticarts.com/named-property-inverses-yay-or-nay/
-- http://richard.cyganiak.de/blog/2006/06/an-rdf-design-pattern-inverse-property-labels/

- named graphs
-- add named graph structures to ttl, json-ld and nt templates
-- maybe graph could serve as collection of statements added to records etc.

- table tracking
-- create statements defined by TSConfig when new IRI is created (per IRI per tracked table)
-- create representations defined by TSConfig when new IRI is created (per IRI per tracked table)

- backend
-- TCA optimization: addRecord fieldControl as popup ?

- create extension with schema.org vocab

- hydra:view has no alternative serialisations in none of the serialisation formats

### v.1.2 ###

- vocabulary importer

- api plugin
-- think about cacheable actions => configurable cHash calculation during redirection => check performance

- resolver
-- call different typolink handlers according to $representation->getAuthority();
-- implement language negotiation

---

scheme = handler type => t3 triggers internal resolving
authority = handler keyword
path = typolink parameter
query = additionalParams
fragment = section

---

tx_lod {
    settings {

        identifierGenerator {
            tx_lod_domain_model_iri {

                # type = Digicademy\Lod\Generator\UidIdentifierGenerator,
                # type = Digicademy\Lod\Generator\UuidIdentifierGenerator,
                # type = Digicademy\Lod\Generator\ForeignRecordTablenameUidIdentifierGenerator,
                # type = Digicademy\Lod\Generator\ForeignRecordFieldIdentifierGenerator,
                # type = Vendor\Package\My\Generator

                Digicademy\Lod\Generator\UidIdentifierGenerator {
                    entityPrefix = E
                    propertyPrefix = P
                }
                Digicademy\Lod\Generator\UuidIdentifierGenerator {
                    entityPrefix = E
                    propertyPrefix = P
                    xmlConformance = 1
                }
                Digicademy\Lod\Generator\ForeignRecordTablenameUidIdentifierGenerator {
                    entityPrefix = E
                    propertyPrefix = P
                    includeTablename = 1
                }
                Digicademy\Lod\Generator\ForeignRecordFieldIdentifierGenerator {
                    entityPrefix = E
                    propertyPrefix = P
                    foreignFieldName = my_foreign_field
                }
            }
            tx_lod_domain_model_bnode {

                # type = Digicademy\Lod\Generator\UidIdentifierGenerator,
                # type = Digicademy\Lod\Generator\UuidIdentifierGenerator,
                # type = Vendor\Package\My\Generator

                Digicademy\Lod\Generator\UidIdentifierGenerator {
                    bnodePrefix = b
                }
                Digicademy\Lod\Generator\UuidIdentifierGenerator, {
                    bnodePrefix = b
                    xmlConformance = 1
                }
            }
        }

        # also register tables in extension configuration
        tableTracking {
            tx_my_table {
                track = 1
                iriPidList = 1,2,3,...
                iriPidList.recursive = 1
                createOnPid = ...
                hideUnhide = 1
                deleteUndelete = 1

                # @TODO: will have tracked record as $cobj->data and stdWrap on all properties
                createType = 1|2 => change to "type"
                namespace =
                label =
                label_language =
                comment =
                comment_language =

                # @TODO: will have tracked record as $cobj->data and stdWrap on all properties ; send through TCE
                createRepresentations {
                    t3 {
                        pid
                        authority
                        path
                        queryParameters
                        fragment
                        content_type
                        content_language
                    }
                    https { ... }
                }

                # @TODO: will have tracked record as $cobj->data and stdWrap on all properties ; send through TCE
                createStatements {
                    1 {
                        pid
                        predicate
                        object
                        graph
                    }
                    2 { ... }
                }

            }
        }

        # @TODO
        statementIriTypeFilter {
            subject = 1|2
        }

    }
}

# map items to generic domainObject

plugin.tx_lod_api.persistence.classes {
    My\Class.mapping.tableName = tx_extension_domain_model_xyz
}

## TYPO3 8.7 and higher

# standard record link configuration from T3 V8 and higher

TCEMAIN.linkHandler.image {
    handler = TYPO3\CMS\Recordlist\LinkHandler\RecordLinkHandler
    label = LLL:EXT:cvma/Resources/Private/Language/locallang.xlf:link.customTab
    configuration {
        table = sys_file_metadata
    }
    scanBefore = page
}

config.recordLinks.image {

    forceLink = 0

    typolink {
        parameter = 13
        additionalParams.data = field:uid
        additionalParams.wrap = &tx_cvma_archive[image]=|&tx_cvma_archive[action]=show&tx_cvma_archive[controller]=Gallery
        section.data = field:fragment
        useCacheHash = 1
    }
}

plugin.tx_lod_api {
    settings {

        resolver {

            # each scheme can have its own custom resolver
#            scheme {
#                # each resolver should implement one standard resolving mechanism for all authorities in this scheme
#                # it should also respect special configurations specified authorities that should be treated different
#                authority {
#                    # typolink configuration ($cObj->data is current representation record)
#                }
#            }

            t3 {
                # the t3 scheme implements the TYPO3 linkhandler (from 8.7 onwards but with backwards comp. for 7.6)
                # each authority equals / can have it's own linkhandler (=linkhander keyword)
                # the record authority implements the generic record linkhandler
                record < config.recordLinks.image
            }

            http {
                my\.domain\.com {
                    # typolink configuration ($cObj->data is current representation record)
                }
            }

            https < .http
        }
    }
}

page.headerData.333 = USER
page.headerData.333 {
    userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
    extensionName = Lod
    pluginName = Serializer
    vendorName = Digicademy
    persistence.storagePid = PID
    settings < plugin.tx_lod_serializer.settings
    view < plugin.tx_lod_serializer.view
}

plugin.tx_lod_serializer {
    settings {
        selectedIri = UID
        mode = embedded
        apiPage = PID
        recordToArgumentMapping {
            pages {
                argumentName = id
            }
            tx_hisodat_domain_model_persons {
                pluginNamespace = tx_hisodat_registers
                argumentName = person
            }
        }
        format {
            default = jsonld
            tx_my_table = FORMAT (jsonld, ttl, rdfxml, nt)
        }
    }
}

# speaking URL configuration

#routeEnhancers:
#  ApiPlugin:
#    type: Extbase
#    limitToPages:
#      - x
#      - y
#    extension: Lod
#    plugin: Api
#    routes:
#      -
#        routePath: '/id/{iri}'
#        _controller: 'Api::about'
#        _arguments:
#          iri: iri
#    defaultController: 'Api::about'
#  PageTypeSuffix:
#    type: PageType
#    default: ''
#    map:
#      .html: 0
#      /about.html: 1991
#      /about.rdf: 2004
#      /about.ttl: 2011
#      /about.nt: 2013
#      /about.json: 2014
